[
    {
        "id": "bee86e81c3ea0ae1",
        "type": "tab",
        "label": "Starter Kit",
        "disabled": false,
        "info": ""
    },
    {
        "id": "3af4af7c6c2f53ff",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD.MM.YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "51ceb9951077cd70",
        "type": "mqtt-broker",
        "name": "local",
        "broker": "192.168.88.10",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "73d0f087ddd13899",
        "type": "ui_tab",
        "name": "Digital.auto - Starter Kit",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8e80fdb433e77b53",
        "type": "ui_group",
        "name": "Steering Control",
        "tab": "73d0f087ddd13899",
        "order": 1,
        "disp": true,
        "width": 16,
        "collapse": false,
        "className": ""
    },
    {
        "id": "888e3ec6c0e3b9f9",
        "type": "ui_group",
        "name": "Roundtrip (Âµs)",
        "tab": "73d0f087ddd13899",
        "order": 2,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5fe016c0e2fb885f",
        "type": "ui_group",
        "name": "Resource Monitor",
        "tab": "73d0f087ddd13899",
        "order": 3,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "92e8de2da2aa0c10",
        "type": "ui_spacer",
        "z": "bee86e81c3ea0ae1",
        "name": "spacer",
        "group": "8e80fdb433e77b53",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "cc1f85727bb223e8",
        "type": "ui_spacer",
        "z": "bee86e81c3ea0ae1",
        "name": "spacer",
        "group": "8e80fdb433e77b53",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "55422bf90f4725a1",
        "type": "ui_spacer",
        "z": "bee86e81c3ea0ae1",
        "name": "spacer",
        "group": "8e80fdb433e77b53",
        "order": 5,
        "width": 4,
        "height": 1
    },
    {
        "id": "d69c1c229aa13cfb",
        "type": "ui_spacer",
        "z": "bee86e81c3ea0ae1",
        "name": "spacer",
        "group": "8e80fdb433e77b53",
        "order": 7,
        "width": 4,
        "height": 1
    },
    {
        "id": "7649d22a0301433f",
        "type": "ui_spacer",
        "z": "bee86e81c3ea0ae1",
        "name": "spacer",
        "group": "8e80fdb433e77b53",
        "order": 8,
        "width": 4,
        "height": 1
    },
    {
        "id": "cd60a219861b6678",
        "type": "ui_spacer",
        "z": "bee86e81c3ea0ae1",
        "name": "spacer",
        "group": "8e80fdb433e77b53",
        "order": 9,
        "width": 4,
        "height": 1
    },
    {
        "id": "69703cc3fa3fb983",
        "type": "ui_spacer",
        "z": "bee86e81c3ea0ae1",
        "name": "spacer",
        "group": "8e80fdb433e77b53",
        "order": 10,
        "width": 4,
        "height": 1
    },
    {
        "id": "0c70ade7c9e0661a",
        "type": "ui_spacer",
        "z": "bee86e81c3ea0ae1",
        "name": "spacer",
        "group": "8e80fdb433e77b53",
        "order": 11,
        "width": 4,
        "height": 1
    },
    {
        "id": "34037f2ab9122c14",
        "type": "ui_spacer",
        "z": "bee86e81c3ea0ae1",
        "name": "spacer",
        "group": "8e80fdb433e77b53",
        "order": 12,
        "width": 4,
        "height": 1
    },
    {
        "id": "a79d90b42d5389fc",
        "type": "ui_spacer",
        "z": "bee86e81c3ea0ae1",
        "name": "spacer",
        "group": "8e80fdb433e77b53",
        "order": 13,
        "width": 4,
        "height": 1
    },
    {
        "id": "721182f42b7804fb",
        "type": "comment",
        "z": "bee86e81c3ea0ae1",
        "name": "WARNING: please check you have started this container with a volume that is mounted to /data\\n otherwise any flow changes are lost when you redeploy or upgrade the container\\n (e.g. upgrade to a more recent node-red docker image).\\n  If you are using named volumes you can ignore this warning.\\n Double click or see info side panel to learn how to start Node-RED in Docker to save your work",
        "info": "\nTo start docker with a bind mount volume (-v option), for example:\n\n```\ndocker run -it -p 1880:1880 -v /home/user/node_red_data:/data --name mynodered nodered/node-red\n```\n\nwhere `/home/user/node_red_data` is a directory on your host machine where you want to store your flows.\n\nIf you do not do this then you can experiment and redploy flows, but if you restart or upgrade the container the flows will be disconnected and lost. \n\nThey will still exist in a hidden data volume, which can be recovered using standard docker techniques, but that is much more complex than just starting with a named volume as described above.",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "71d6230b4cb6a814",
        "type": "mqtt in",
        "z": "bee86e81c3ea0ae1",
        "name": "statistics zone_1",
        "topic": "statistics/data",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "51ceb9951077cd70",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 400,
        "wires": [
            [
                "eed32e44b6fe8dc9",
                "ebb6fd3c8f190c8d",
                "319a74364624edae",
                "878529b2afe05bac",
                "91bc495589a5c4fe",
                "201836c02ae9b0a3"
            ]
        ],
        "outputLabels": [
            "walltimer_jitter"
        ]
    },
    {
        "id": "eed32e44b6fe8dc9",
        "type": "debug",
        "z": "bee86e81c3ea0ae1",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 340,
        "wires": []
    },
    {
        "id": "ebb6fd3c8f190c8d",
        "type": "function",
        "z": "bee86e81c3ea0ae1",
        "name": "ping_time",
        "func": "// Extract values from the MQTT payload\n\nlet ping_time = msg.payload.ping_time;\n\n\n// Send formatted values for different chart series\nreturn [    \n        { topic: \"Ping time\", payload: ping_time }\n];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 400,
        "wires": [
            [
                "8da9cfbb2232ee81"
            ]
        ]
    },
    {
        "id": "11c81222445956f4",
        "type": "debug",
        "z": "bee86e81c3ea0ae1",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 520,
        "wires": []
    },
    {
        "id": "0c6e587a0fec80c6",
        "type": "ui_slider",
        "z": "bee86e81c3ea0ae1",
        "name": "",
        "label": "  ",
        "tooltip": "",
        "group": "8e80fdb433e77b53",
        "order": 3,
        "width": 14,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": "-1000",
        "max": "1000",
        "step": "50",
        "className": "",
        "x": 170,
        "y": 820,
        "wires": [
            [
                "53530cd8f32c9ede"
            ]
        ]
    },
    {
        "id": "53530cd8f32c9ede",
        "type": "mqtt out",
        "z": "bee86e81c3ea0ae1",
        "name": "Lane assist Torque",
        "topic": "Vehicle/ADAS/LaneAssist/TargetSteeringWheelAngle",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "51ceb9951077cd70",
        "x": 670,
        "y": 820,
        "wires": []
    },
    {
        "id": "6d2e1cced4109fde",
        "type": "ui_text",
        "z": "bee86e81c3ea0ae1",
        "group": "8e80fdb433e77b53",
        "order": 1,
        "width": 16,
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 170,
        "y": 780,
        "wires": []
    },
    {
        "id": "ecc7509300c8c220",
        "type": "ui_gauge",
        "z": "bee86e81c3ea0ae1",
        "name": "",
        "group": "8e80fdb433e77b53",
        "order": 6,
        "width": 8,
        "height": 4,
        "gtype": "gage",
        "title": "",
        "label": "",
        "format": "",
        "min": "-1000",
        "max": "1000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 630,
        "y": 620,
        "wires": []
    },
    {
        "id": "878529b2afe05bac",
        "type": "function",
        "z": "bee86e81c3ea0ae1",
        "name": "left_angle",
        "func": "// Extract values from the MQTT payload\n\nlet left_angle = - msg.payload.motor_angle;\n\n\n// Send formatted values for different chart series\nreturn [    \n        { topic: \"Left angle\", payload: left_angle }\n];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 620,
        "wires": [
            [
                "ecc7509300c8c220",
                "11c81222445956f4"
            ]
        ]
    },
    {
        "id": "319a74364624edae",
        "type": "function",
        "z": "bee86e81c3ea0ae1",
        "name": "can_latency",
        "func": "// Extract values from the MQTT payload\nlet can_latency = msg.payload.can_latency;\n\n\n// Send formatted values for different chart series\nreturn [\n        { topic: \"CAN latency\", payload: can_latency }\n];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 460,
        "wires": [
            [
                "8da9cfbb2232ee81"
            ]
        ]
    },
    {
        "id": "8da9cfbb2232ee81",
        "type": "ui_chart",
        "z": "bee86e81c3ea0ae1",
        "name": "",
        "group": "888e3ec6c0e3b9f9",
        "order": 1,
        "width": 8,
        "height": 6,
        "label": "",
        "chartType": "line",
        "legend": "true",
        "xformat": " ",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "1500",
        "removeOlder": "60",
        "removeOlderPoints": "60",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#11e83c",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 610,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "7f306b6bae72b569",
        "type": "ui_gauge",
        "z": "bee86e81c3ea0ae1",
        "name": "",
        "group": "5fe016c0e2fb885f",
        "order": 1,
        "width": 4,
        "height": 6,
        "gtype": "gage",
        "title": "Memory usage",
        "label": "%",
        "format": "{{value}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 660,
        "y": 680,
        "wires": []
    },
    {
        "id": "91bc495589a5c4fe",
        "type": "function",
        "z": "bee86e81c3ea0ae1",
        "name": "memory_usage",
        "func": "// Extract values from the MQTT payload\n\nlet memory_usage = msg.payload.memory_usage;\n\n\n// Send formatted values for different chart series\nreturn [    \n        { topic: \"Memory usage %\", payload: memory_usage }\n];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 680,
        "wires": [
            [
                "7f306b6bae72b569"
            ]
        ]
    },
    {
        "id": "e0ae3b855c51492a",
        "type": "ui_gauge",
        "z": "bee86e81c3ea0ae1",
        "name": "",
        "group": "5fe016c0e2fb885f",
        "order": 2,
        "width": 4,
        "height": 6,
        "gtype": "gage",
        "title": "CPU load",
        "label": "%",
        "format": "{{value}}",
        "min": "0",
        "max": "400",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 640,
        "y": 740,
        "wires": []
    },
    {
        "id": "201836c02ae9b0a3",
        "type": "function",
        "z": "bee86e81c3ea0ae1",
        "name": "CPU-load",
        "func": "// Extract values from the MQTT payload\n\nlet CPU_load = msg.payload.CPU_usage;\n\n\n// Send formatted values for different chart series\nreturn [    \n        { topic: \"CPU load %\", payload: CPU_load }\n];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 740,
        "wires": [
            [
                "e0ae3b855c51492a"
            ]
        ]
    }
]
